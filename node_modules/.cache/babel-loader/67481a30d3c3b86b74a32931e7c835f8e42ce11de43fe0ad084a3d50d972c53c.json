{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import ContactForm from\"./components/ContactForm\";import ContactList from\"./components/ContactList\";import SearchBar from\"./components/SearchBar\";import{getContacts,saveContacts}from\"./localStorage\";import\"./styles/App.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[contacts,setContacts]=useState([]);const[searchQuery,setSearchQuery]=useState(\"\");const[editableContact,setEditableContact]=useState(null);const[isInitialized,setIsInitialized]=useState(false);const[showForm,setShowForm]=useState(false);useEffect(()=>{const storedContacts=getContacts();setContacts(storedContacts);setIsInitialized(true);},[]);useEffect(()=>{if(isInitialized){saveContacts(contacts);console.log(\"Saving to localStorage:\",contacts);}},[contacts,isInitialized]);// ✅ Load contacts once on initial render\n// useEffect(() => {\n//   const storedContacts = getContacts();\n//   console.log(\"Loaded from localStorage:\", storedContacts);\n//   setContacts(storedContacts);\n// }, []);\n// ✅ Save contacts whenever they change\n// useEffect(() => {\n//   saveContacts(contacts);\n//   console.log(\"Saving to localStorage:\", contacts);\n// }, [contacts]);\nconst addOrUpdateContact=contact=>{const uniqueId=Date.now().toString();// ✅ simpler + compatible\nif(contact.id){setContacts(contacts.map(c=>c.id===contact.id?contact:c));}else{setContacts([...contacts,{...contact,id:uniqueId}]);}};const deleteContact=id=>{setContacts(contacts.filter(contact=>contact.id!==id));};const handleEdit=contact=>{setEditableContact(contact);};const filteredContacts=contacts.filter(c=>c.name.toLowerCase().includes(searchQuery.toLowerCase())||c.email.toLowerCase().includes(searchQuery.toLowerCase()));return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"header\",children:[/*#__PURE__*/_jsx(\"img\",{src:\"/tp.jpg\",alt:\"Logo\",className:\"logo\"}),/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:\"Contact Manager\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"search-bar-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"search-bar-wrapper\",children:/*#__PURE__*/_jsx(SearchBar,{searchQuery:searchQuery,setSearchQuery:setSearchQuery})}),/*#__PURE__*/_jsx(\"div\",{className:\"toggle-form-wrapper\",children:/*#__PURE__*/_jsx(\"button\",{className:\"toggle-form\",onClick:()=>setShowForm(!showForm),children:showForm?\"Close Form\":\"Add New Contact\"})})]}),showForm&&/*#__PURE__*/_jsx(ContactForm,{onSubmit:addOrUpdateContact,editable:editableContact}),/*#__PURE__*/_jsx(\"div\",{className:\"scrollable-contact-list\",children:/*#__PURE__*/_jsx(ContactList,{contacts:filteredContacts,onDelete:deleteContact,onEdit:handleEdit})})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","ContactForm","ContactList","SearchBar","getContacts","saveContacts","jsx","_jsx","jsxs","_jsxs","App","contacts","setContacts","searchQuery","setSearchQuery","editableContact","setEditableContact","isInitialized","setIsInitialized","showForm","setShowForm","storedContacts","console","log","addOrUpdateContact","contact","uniqueId","Date","now","toString","id","map","c","deleteContact","filter","handleEdit","filteredContacts","name","toLowerCase","includes","email","className","children","src","alt","onClick","onSubmit","editable","onDelete","onEdit"],"sources":["D:/VS_CODE_PROJECTS/contact-manager/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport SearchBar from \"./components/SearchBar\";\nimport { getContacts, saveContacts } from \"./localStorage\";\nimport \"./styles/App.css\";\n\nfunction App() {\n  const [contacts, setContacts] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [editableContact, setEditableContact] = useState(null);\n\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [showForm, setShowForm] = useState(false);\n\n  useEffect(() => {\n    const storedContacts = getContacts();\n    setContacts(storedContacts);\n    setIsInitialized(true);\n  }, []);\n\n  useEffect(() => {\n    if (isInitialized) {\n      saveContacts(contacts);\n      console.log(\"Saving to localStorage:\", contacts);\n    }\n  }, [contacts, isInitialized]);\n\n  // ✅ Load contacts once on initial render\n  // useEffect(() => {\n  //   const storedContacts = getContacts();\n  //   console.log(\"Loaded from localStorage:\", storedContacts);\n\n  //   setContacts(storedContacts);\n  // }, []);\n\n  // ✅ Save contacts whenever they change\n  // useEffect(() => {\n  //   saveContacts(contacts);\n  //   console.log(\"Saving to localStorage:\", contacts);\n  // }, [contacts]);\n\n  const addOrUpdateContact = (contact) => {\n    const uniqueId = Date.now().toString(); // ✅ simpler + compatible\n\n    if (contact.id) {\n      setContacts(contacts.map((c) => (c.id === contact.id ? contact : c)));\n    } else {\n      setContacts([...contacts, { ...contact, id: uniqueId }]);\n    }\n  };\n\n  const deleteContact = (id) => {\n    setContacts(contacts.filter((contact) => contact.id !== id));\n  };\n\n  const handleEdit = (contact) => {\n    setEditableContact(contact);\n  };\n\n  const filteredContacts = contacts.filter(\n    (c) =>\n      c.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      c.email.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"container\">\n      {/* Header with logo */}\n      <div className=\"header\">\n        <img src=\"/tp.jpg\" alt=\"Logo\" className=\"logo\" />\n        <h1 className=\"title\">Contact Manager</h1>\n      </div>\n      <div className=\"search-bar-container\">\n        <div className=\"search-bar-wrapper\">\n          <SearchBar\n            searchQuery={searchQuery}\n            setSearchQuery={setSearchQuery}\n          />\n        </div>\n        <div className=\"toggle-form-wrapper\">\n          <button\n            className=\"toggle-form\"\n            onClick={() => setShowForm(!showForm)}\n          >\n            {showForm ? \"Close Form\" : \"Add New Contact\"}\n          </button>\n        </div>\n      </div>\n\n      {/* Lazy Loaded Contact Form */}\n      {showForm && (\n        <ContactForm onSubmit={addOrUpdateContact} editable={editableContact} />\n      )}\n      {/* <ContactForm onSubmit={addOrUpdateContact} editable={editableContact} /> */}\n\n      {/* Contact List Scrollable Section */}\n      <div className=\"scrollable-contact-list\">\n        <ContactList\n          contacts={filteredContacts}\n          onDelete={deleteContact}\n          onEdit={handleEdit}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}