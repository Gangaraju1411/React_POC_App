{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS_CODE_PROJECTS\\\\contact-manager\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport SearchBar from \"./components/SearchBar\";\nimport { getContacts, saveContacts } from \"./localStorage\";\nimport \"./styles/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [editableContact, setEditableContact] = useState(null);\n\n  // ✅ Load contacts once on initial render\n  useEffect(() => {\n    const storedContacts = getContacts();\n    console.log(\"Loaded from localStorage:\", storedContacts);\n    setContacts(storedContacts);\n  }, []);\n\n  // ✅ Save contacts whenever they change\n  useEffect(() => {\n    saveContacts(contacts);\n    console.log(\"Saving to localStorage:\", contacts);\n  }, [contacts]);\n  const addOrUpdateContact = contact => {\n    const uniqueId = Date.now().toString(); // ✅ simpler + compatible\n\n    if (contact.id) {\n      setContacts(contacts.map(c => c.id === contact.id ? contact : c));\n    } else {\n      setContacts([...contacts, {\n        ...contact,\n        id: uniqueId\n      }]);\n    }\n  };\n  const deleteContact = id => {\n    setContacts(contacts.filter(contact => contact.id !== id));\n  };\n  const handleEdit = contact => {\n    setEditableContact(contact);\n  };\n  const filteredContacts = contacts.filter(c => c.name.toLowerCase().includes(searchQuery.toLowerCase()) || c.email.toLowerCase().includes(searchQuery.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Contact Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      searchQuery: searchQuery,\n      setSearchQuery: setSearchQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n      onSubmit: addOrUpdateContact,\n      editable: editableContact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactList, {\n      contacts: filteredContacts,\n      onDelete: deleteContact,\n      onEdit: handleEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lmFe5UrjYWpcEpXce2Kg6Lr3MgE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","ContactList","SearchBar","getContacts","saveContacts","jsxDEV","_jsxDEV","App","_s","contacts","setContacts","searchQuery","setSearchQuery","editableContact","setEditableContact","storedContacts","console","log","addOrUpdateContact","contact","uniqueId","Date","now","toString","id","map","c","deleteContact","filter","handleEdit","filteredContacts","name","toLowerCase","includes","email","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","editable","onDelete","onEdit","_c","$RefreshReg$"],"sources":["D:/VS_CODE_PROJECTS/contact-manager/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport SearchBar from \"./components/SearchBar\";\nimport { getContacts, saveContacts } from \"./localStorage\";\nimport \"./styles/App.css\";\n\nfunction App() {\n  const [contacts, setContacts] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [editableContact, setEditableContact] = useState(null);\n\n  // ✅ Load contacts once on initial render\n  useEffect(() => {\n    const storedContacts = getContacts();\n    console.log(\"Loaded from localStorage:\", storedContacts);\n\n    setContacts(storedContacts);\n  }, []);\n\n  // ✅ Save contacts whenever they change\n  useEffect(() => {\n    saveContacts(contacts);\n    console.log(\"Saving to localStorage:\", contacts);\n  }, [contacts]);\n\n  const addOrUpdateContact = (contact) => {\n    const uniqueId = Date.now().toString(); // ✅ simpler + compatible\n\n    if (contact.id) {\n      setContacts(contacts.map((c) => (c.id === contact.id ? contact : c)));\n    } else {\n      setContacts([...contacts, { ...contact, id: uniqueId }]);\n    }\n  };\n\n  const deleteContact = (id) => {\n    setContacts(contacts.filter((contact) => contact.id !== id));\n  };\n\n  const handleEdit = (contact) => {\n    setEditableContact(contact);\n  };\n\n  const filteredContacts = contacts.filter(\n    (c) =>\n      c.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      c.email.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"container\">\n      <h1>Contact Manager</h1>\n      <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n      <ContactForm onSubmit={addOrUpdateContact} editable={editableContact} />\n      <ContactList\n        contacts={filteredContacts}\n        onDelete={deleteContact}\n        onEdit={handleEdit}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}